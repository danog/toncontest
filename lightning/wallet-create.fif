"TonUtil.fif" include
"lib.fif" include

{ ."usage: " @' $0 type ." <workchain-id> <state-name> <keyA> <keyB> <addrA> <addrB>" cr cr
  ."Creates a new lightning wallet in specified workchain between users <addrA> and <addrB>." cr
  ."The first of the keys must be a private key (pre-existing or not), used to sign the zerostate; the other MUST be a public key." cr
  ."Create or generate public key files from private keys using gen-pub.fif privkey" cr cr
  1 halt
} : usage
$# 5 < ' usage if

true constant bounce

$1 parse-workchain-id =: wc    // set workchain id from command line argument
$2 constant file-base
$3 +".pk" load-generate-keypair const privkey 256 B>u@ const keyA
$4 +".pubkey" load-pubkey const keyB
$5 bounce parse-load-address const bounceA 2const addrA
$6 bounce parse-load-address const bounceB 2const addrB

cr
."Creating new lightning wallet in workchain " wc . ."..." cr cr

// Zerostate
// state$_ signatures:MaybeTwoSignatures seqno:uint32 delta:Grams final:Bool {turnB:(seqno % 2)} = State;

<b
  0 32 u,
  0 Gram,
  0 1 u,
b>

dup ."Signing zerostate: " <s csr. cr
dup hash privkey ed25519_sign_uint
// signature$_ R:bits256 s:bits256 = Signature;
<b swap B, b>
// oneSignatureA$0 a:^Signature = MaybeTwoSignatures;
<b 
  0 1 u,
  swap ref,
b>

// state$_ signatures:MaybeTwoSignatures seqno:uint32 delta:Grams final:Bool {turnB:(seqno % 2)} = State;
<b
  swap <s s,
  swap <s s,
b>

dup ."Signed zerostate is " <s csr. cr
dup 2 boc+>B dup Bx. cr
file-base +"-state0.boc" tuck B>file
."(Saved zerostate to file " type .")" cr


// code
"wallet-code.fif" include
// data
// simpleAddr$_ workchain_id:int8 address:bits256 = SimpleAddr;
// simpleAddrPair$_ a:SimpleAddr b:SimpleAddr = SimpleAddrPair;
//
// storage$_ keyA:PubKey keyB:PubKey amountA:Grams amountB:Grams addresses:^SimpleAddrPair state:State = Storage X;
//
<b
   keyA 256 u, 
   keyB 256 u, 
   0 Gram,
   0 Gram,
   addrB addrA
   <b
    rot 8 i, swap 256 u, 
    rot 8 i, swap 256 u,
   b> ref,
   rot <s s,
b>
// create StateInit
// _ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
//   code:(Maybe ^Cell) data:(Maybe ^Cell)
//   library:(HashmapE 256 SimpleLib) = StateInit;
// split_depth 0 special 0 code 1 data 1 library hme_empty 0
//
<b b{00110} s, rot ref, swap ref, b> 

dup ."StateInit: " <s csr. cr
dup hash wc swap 2dup 2constant wallet-addr
."new wallet address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr

// multiSigInit$10 = MultiSigWrapper X;
<b 2 2 u, b>
// dup ."signing message: " <s csr. cr
// dup hash privkey ed25519_sign_uint

// Put StateInit on top
swap

// message$_ {X:Type} info:CommonMsgInfo
//                 init:(Maybe (Either StateInit ^StateInit))
//                                                             body:(Either X ^X) = Message X;

<b b{1000100} s, wallet-addr addr, 0 Gram, 1 1 u, swap maybe-ref, b{0} s, swap <s s, b>
dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
file-base +"-create.boc" tuck B>file
."(Saved wallet creating query to file " type .")" cr
