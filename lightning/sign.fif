#!/usr/bin/env -S fift -s
"TonUtil.fif" include
"lib.fif" include

{
  ."usage: " @' $0 type ." <state-base> <key> <seqno>" cr
  ."Signs pending state <state-base>-state<seqno>.boc file with private key <key>.pk and writes result to <state-base>-state<seqno>c.boc" cr 1 halt
} : usage
$# 3 < ' usage if

$1 =: state-base
$2 =: key
$3 parse-int =: seqno


state-base +"-state" seqno (.) $+ +".boc" const previous-state
state-base +"-state" seqno (.) $+ +"c.boc" const new-statec
state-base +"-state" seqno (.) $+ +"c-ext.boc" const new-statec-ext

."State file: " previous-state type cr 
previous-state file-exists? not { ."The state file was not created! Ask the other user to generate and send you a new state, first." cr 1 halt } if

previous-state file>B B>boc <s inspect-state
sig-count 2 = { ."Too many signatures in previous state, need 1, have 2" cr 1 halt } if
sigA null? {
  sigB
  0
} {
  sigA
  1
} cond
const wasA // Whether the query was created by A or B
const anySig

// turnB isA
// 1     0 => 1 OK
// 1     1 => 0 not OK
// 0     0 => 0 not OK
// 0     1 => 1 OK

seqno 2 mod wasA xor 1 <> {
  ."Not his turn to create the state!" cr 1 halt
} if


key +".pk" load-keypair nip constant wallet_pk
state-base +".addr" load-address
2dup 2constant wallet-addr
."Lightning wallet address = " 2dup .addr cr 6 .Addr cr
key +".pk" load-keypair nip constant privkey

."Signing new delta " delta .GR ."..." cr 
// New state
// state$_ signatures:MaybeTwoSignatures seqno:uint32 delta:Grams final:Bool {turnB:(seqno % 2)} = State;

<b
  seqno 32 u,
  delta sGram,
  final 1 u,
b>

dup ."Signing new state with seqno " seqno . .": " <s csr. cr
dup hash privkey ed25519_sign_uint
dup anySig B= { ."Signature A and B are the same!" cr 1 halt } if

wasA ' sigB! ' sigA! cond

// signature$_ R:bits256 s:bits256 = Signature;
// twoSignatures$_ a:^Signature b:^Signature = MaybeTwoSignatures;
<b 
  sigA <b swap B, b> ref,
  sigB <b swap B, b> ref,
b>

// state$_ signatures:MaybeTwoSignatures seqno:uint32 delta:Grams final:Bool {turnB:(seqno % 2)} = State;
<b
  swap <s s,
  swap <s s,
b>

dup ."Signed new state with seqno " seqno . ."is: " <s csr. cr
dup 2 boc+>B dup Bx. cr
new-statec tuck B>file
."(Saved new state to file " type .")" cr


//
// addr_none$00 = MsgAddressExt;
// addr_extern$01 len:(## 9) external_address:(bits len) 
//              = MsgAddressExt;
// anycast_info$_ depth:(#<= 30) { depth >= 1 }
//    rewrite_pfx:(bits depth) = Anycast;
// addr_std$10 anycast:(Maybe Anycast) 
//    workchain_id:int8 address:bits256  = MsgAddressInt;
// addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9) 
//    workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
//
// ext_in_msg_info$10 src:MsgAddressExt dest:MsgAddressInt 
//  import_fee:Grams = CommonMsgInfo;
//
//
// message$_ {X:Type} info:CommonMsgInfo
//   init:(Maybe (Either StateInit ^StateInit))
//   body:(Either X ^X) = Message X;
//
<b b{1000100} s, wallet-addr addr, 0 Gram, b{00} s,
   swap <s s, b>

dup ."resulting external message: " <s csr. cr
2 boc+>B dup Bx. cr
new-statec-ext tuck B>file
."(Saved to file " type .")" cr
