
// Keys will be deserialized to a simple tuple, using the correct PubKeys constructor depending on the number n of keys left
//
// pubKeys1$_ key1:PubKey = PubKeys;
// pubKeys2$_ key1:PubKey key2:PubKey = PubKeys;
// pubKeys3$_ key1:PubKey key2:PubKey key3:PubKey = PubKeys;
// pubKeys3and$_ key1:PubKey key2:PubKey key3:PubKey _:^PubKeys = PubKeys;
//
// keys:[ ^PubKeys ]

// First create builders with groups of (at most) 3 keys each
<b 
0 { dup 1+ swap  // Create a counter
  // Get builder b (or create a new one)
  // if ($k && !($k % 3)) {
  dup dup 3 mod 0<> not and { <b } { 2 roll } cond

  keys rot []    // Get n-th value x
  256            // y
  
  u,             // Write uint
  swap
} n times drop

// Then convert builders into cells, appropriately inserting references for nested pubkeys
n 3 /c const nCeil   // Number of builders
nCeil 1- const nRev  // Steps for reverse counter
nCeil 3 > const shouldRef // Whether there are more than 3 builders and references must be created
nCeil 1+ const nRoll // Steps for roll

nRev { dup 1- swap  // Create a reverse counter
  rot // Get current builder
  swap
  // if ($x != $nRev && $x > 1 && $nCeil > 3)
  dup nRev <> swap 1 > shouldRef and and { nCeil pick ref, } if

  b>          // Close builder, create cell
  nCeil -roll // Put cell at the back of the stack

} nCeil times drop

// Number of cells to store / Number of already referenced cells to delete
nCeil 3 > { 3 nCeil 3 - } { nCeil 0 } cond const nRem const nCells

// Drop all cells we already referenced
' drop nRem times

// Reverse order of cells
nCells 0 reverse

// Create tuple with cells
nCells tuple const keyCells
